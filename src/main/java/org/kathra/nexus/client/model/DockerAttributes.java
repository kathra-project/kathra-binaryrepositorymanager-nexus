/*
 * Copyright (c) 2020. The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *    IRT SystemX (https://www.kathra.org/)
 *
 */

/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.23.0-03
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kathra.nexus.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * DockerAttributes
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-01T16:18:10.112Z")
public class DockerAttributes {
  @SerializedName("v1Enabled")
  private Boolean v1Enabled = null;

  @SerializedName("forceBasicAuth")
  private Boolean forceBasicAuth = null;

  @SerializedName("httpPort")
  private Integer httpPort = null;

  @SerializedName("httpsPort")
  private Integer httpsPort = null;

  public DockerAttributes v1Enabled(Boolean v1Enabled) {
    this.v1Enabled = v1Enabled;
    return this;
  }

   /**
   * Whether to allow clients to use the V1 API to interact with this repository
   * @return v1Enabled
  **/
  @ApiModelProperty(example = "false", required = true, value = "Whether to allow clients to use the V1 API to interact with this repository")
  public Boolean isV1Enabled() {
    return v1Enabled;
  }

  public void setV1Enabled(Boolean v1Enabled) {
    this.v1Enabled = v1Enabled;
  }

  public DockerAttributes forceBasicAuth(Boolean forceBasicAuth) {
    this.forceBasicAuth = forceBasicAuth;
    return this;
  }

   /**
   * Whether to force authentication (Docker Bearer Token Realm required if false)
   * @return forceBasicAuth
  **/
  @ApiModelProperty(example = "true", required = true, value = "Whether to force authentication (Docker Bearer Token Realm required if false)")
  public Boolean isForceBasicAuth() {
    return forceBasicAuth;
  }

  public void setForceBasicAuth(Boolean forceBasicAuth) {
    this.forceBasicAuth = forceBasicAuth;
  }

  public DockerAttributes httpPort(Integer httpPort) {
    this.httpPort = httpPort;
    return this;
  }

   /**
   * Create an HTTP connector at specified port
   * @return httpPort
  **/
  @ApiModelProperty(example = "8082", value = "Create an HTTP connector at specified port")
  public Integer getHttpPort() {
    return httpPort;
  }

  public void setHttpPort(Integer httpPort) {
    this.httpPort = httpPort;
  }

  public DockerAttributes httpsPort(Integer httpsPort) {
    this.httpsPort = httpsPort;
    return this;
  }

   /**
   * Create an HTTPS connector at specified port
   * @return httpsPort
  **/
  @ApiModelProperty(example = "8083", value = "Create an HTTPS connector at specified port")
  public Integer getHttpsPort() {
    return httpsPort;
  }

  public void setHttpsPort(Integer httpsPort) {
    this.httpsPort = httpsPort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerAttributes dockerAttributes = (DockerAttributes) o;
    return Objects.equals(this.v1Enabled, dockerAttributes.v1Enabled) &&
        Objects.equals(this.forceBasicAuth, dockerAttributes.forceBasicAuth) &&
        Objects.equals(this.httpPort, dockerAttributes.httpPort) &&
        Objects.equals(this.httpsPort, dockerAttributes.httpsPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(v1Enabled, forceBasicAuth, httpPort, httpsPort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerAttributes {\n");
    
    sb.append("    v1Enabled: ").append(toIndentedString(v1Enabled)).append("\n");
    sb.append("    forceBasicAuth: ").append(toIndentedString(forceBasicAuth)).append("\n");
    sb.append("    httpPort: ").append(toIndentedString(httpPort)).append("\n");
    sb.append("    httpsPort: ").append(toIndentedString(httpsPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

