/*
 * Copyright (c) 2020. The Kathra Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *    IRT SystemX (https://www.kathra.org/)
 *
 */

/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.23.0-03
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kathra.nexus.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MavenAttributes
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-01T16:18:10.112Z")
public class MavenAttributes {
  /**
   * What type of artifacts does this repository store?
   */
  @JsonAdapter(VersionPolicyEnum.Adapter.class)
  public enum VersionPolicyEnum {
    RELEASE("RELEASE"),
    
    SNAPSHOT("SNAPSHOT"),
    
    MIXED("MIXED");

    private String value;

    VersionPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionPolicyEnum fromValue(String text) {
      for (VersionPolicyEnum b : VersionPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VersionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VersionPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("versionPolicy")
  private VersionPolicyEnum versionPolicy = null;

  /**
   * Validate that all paths are maven artifact or metadata paths
   */
  @JsonAdapter(LayoutPolicyEnum.Adapter.class)
  public enum LayoutPolicyEnum {
    STRICT("STRICT"),
    
    PERMISSIVE("PERMISSIVE");

    private String value;

    LayoutPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutPolicyEnum fromValue(String text) {
      for (LayoutPolicyEnum b : LayoutPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LayoutPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LayoutPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("layoutPolicy")
  private LayoutPolicyEnum layoutPolicy = null;

  public MavenAttributes versionPolicy(VersionPolicyEnum versionPolicy) {
    this.versionPolicy = versionPolicy;
    return this;
  }

   /**
   * What type of artifacts does this repository store?
   * @return versionPolicy
  **/
  @ApiModelProperty(example = "MIXED", value = "What type of artifacts does this repository store?")
  public VersionPolicyEnum getVersionPolicy() {
    return versionPolicy;
  }

  public void setVersionPolicy(VersionPolicyEnum versionPolicy) {
    this.versionPolicy = versionPolicy;
  }

  public MavenAttributes layoutPolicy(LayoutPolicyEnum layoutPolicy) {
    this.layoutPolicy = layoutPolicy;
    return this;
  }

   /**
   * Validate that all paths are maven artifact or metadata paths
   * @return layoutPolicy
  **/
  @ApiModelProperty(example = "STRICT", value = "Validate that all paths are maven artifact or metadata paths")
  public LayoutPolicyEnum getLayoutPolicy() {
    return layoutPolicy;
  }

  public void setLayoutPolicy(LayoutPolicyEnum layoutPolicy) {
    this.layoutPolicy = layoutPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MavenAttributes mavenAttributes = (MavenAttributes) o;
    return Objects.equals(this.versionPolicy, mavenAttributes.versionPolicy) &&
        Objects.equals(this.layoutPolicy, mavenAttributes.layoutPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionPolicy, layoutPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MavenAttributes {\n");
    
    sb.append("    versionPolicy: ").append(toIndentedString(versionPolicy)).append("\n");
    sb.append("    layoutPolicy: ").append(toIndentedString(layoutPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

